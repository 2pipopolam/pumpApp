# reminder_bot.py

import os
import logging
import requests
import uuid
from telegram import Update
from apscheduler.schedulers.background import BackgroundScheduler
from datetime import datetime
import pytz
from dotenv import load_dotenv
import json

from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters
)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

TOKEN = os.getenv('TOKEN')
BOT_API_KEY = os.getenv('BOT_API_KEY')

if not TOKEN:
    logger.error("TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
    exit(1)

if not BOT_API_KEY:
    logger.error("BOT_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
    exit(1)


API_URL = 'http://127.0.0.1:8000/api/user-training-sessions/'
LINK_API_URL = 'http://127.0.0.1:8000/api/link-telegram/'

# –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å
TIMEZONE = pytz.timezone('Europe/Lisbon')

# –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è API-–∑–∞–ø—Ä–æ—Å–æ–≤
HEADERS = {
    'Authorization': f'Api-Key {BOT_API_KEY}',     
    'Content-Type': 'application/json',
}

# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–≤—è–∑–µ–π chat_id ‚Üî user_id
CHAT_IDS_FILE = 'chat_ids.json'



def fetch_training_sessions(user_id):
    """
    Fetches the list of training sessions for the user with the given user_id.
    """
    try:
        params = {'id': user_id}
        logger.info(f"Sending request to API: {API_URL} with user_id: {user_id}")
        logger.info(f"Headers: {HEADERS}")
        response = requests.get(API_URL, headers=HEADERS, params=params)
        logger.info(f"Response status code: {response.status_code}")
        logger.info(f"Response content: {response.content}")
        response.raise_for_status()
        return response.json()
    except requests.RequestException as e:
        logger.error(f"Error fetching training sessions for user_id {user_id}: {e}")
        return []




def day_name_to_cron(day_name):
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–Ω—è –Ω–µ–¥–µ–ª–∏ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º –≤ —Ñ–æ—Ä–º–∞—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π cron.
    """
    days = {
        'Monday': 'mon',
        'Tuesday': 'tue',
        'Wednesday': 'wed',
        'Thursday': 'thu',
        'Friday': 'fri',
        'Saturday': 'sat',
        'Sunday': 'sun',
    }
    return days.get(day_name.strip().capitalize(), 'mon')

def get_user_id_from_chat_id(chat_id):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç user_id, —Å–≤—è–∑–∞–Ω–Ω—ã–π —Å –¥–∞–Ω–Ω—ã–º chat_id.
    """
    try:
        with open(CHAT_IDS_FILE, 'r') as f:
            chat_ids = json.load(f)
        return chat_ids.get(str(chat_id))
    except FileNotFoundError:
        logger.warning(f"–§–∞–π–ª {CHAT_IDS_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return None
    except json.JSONDecodeError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ {CHAT_IDS_FILE}: {e}")
        return None
    except Exception as e:
        logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ user_id –¥–ª—è chat_id {chat_id}: {e}")
        return None

async def send_reminder(context: ContextTypes.DEFAULT_TYPE):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    """
    try:
        await context.bot.send_message(
            chat_id=context.job.context['chat_id'],
            text=context.job.context['message']
        )
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {context.job.context['chat_id']}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")

def get_all_user_chat_ids():
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å –≤—Å–µ—Ö chat_id –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –∏–º user_id.
    """
    try:
        with open(CHAT_IDS_FILE, 'r') as f:
            return json.load(f)
    except FileNotFoundError:
        logger.warning(f"–§–∞–π–ª {CHAT_IDS_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å.")
        return {}
    except json.JSONDecodeError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ {CHAT_IDS_FILE}: {e}")
        return {}
    except Exception as e:
        logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ {CHAT_IDS_FILE}: {e}")
        return {}

def save_user_chat_id(chat_id, user_id):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–≤—è–∑—å –º–µ–∂–¥—É chat_id –∏ user_id –≤ —Ñ–∞–π–ª–µ chat_ids.json.
    """
    try:
        with open(CHAT_IDS_FILE, 'r') as f:
            chat_ids = json.load(f)
    except FileNotFoundError:
        chat_ids = {}
    except json.JSONDecodeError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ {CHAT_IDS_FILE}: {e}")
        chat_ids = {}
    except Exception as e:
        logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ {CHAT_IDS_FILE}: {e}")
        chat_ids = {}

    if user_id is not None:
        if chat_id not in chat_ids:
            chat_ids[chat_id] = user_id
            logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω –Ω–æ–≤—ã–π chat_id: {chat_id} —Å user_id: {user_id}")
        else:
            if chat_ids[chat_id] != user_id:
                chat_ids[chat_id] = user_id
                logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω chat_id: {chat_id} —Å –Ω–æ–≤—ã–º user_id: {user_id}")
            else:
                logger.info(f"chat_id {chat_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —Å user_id {chat_ids[chat_id]}.")
    
        try:
            with open(CHAT_IDS_FILE, 'w') as f:
                json.dump(chat_ids, f, indent=4)
            logger.info(f"–§–∞–π–ª {CHAT_IDS_FILE} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω.")
        except IOError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ {CHAT_IDS_FILE}: {e}")
    else:
        logger.info(f"user_id –¥–ª—è chat_id {chat_id} –Ω–µ –∑–∞–¥–∞–Ω. –ù–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ {CHAT_IDS_FILE}.")

def schedule_reminders(app):
    """
    –ü–ª–∞–Ω–∏—Ä—É–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å —Å–≤—è–∑–∞–Ω–Ω—ã–π user_id.
    """
    scheduler = BackgroundScheduler(timezone=TIMEZONE)
    user_chat_ids = get_all_user_chat_ids()

    if not user_chat_ids:
        logger.warning("–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö chat_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.")
        return

    for chat_id, user_id in user_chat_ids.items():
        if not user_id:
            logger.warning(f"user_id –¥–ª—è chat_id {chat_id} –Ω–µ –∑–∞–¥–∞–Ω. –ü—Ä–æ–ø—É—Å–∫.")
            continue

        # —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –¥–ª—è user_id
        sessions = fetch_training_sessions(user_id=user_id)

        if not sessions:
            logger.warning(f"–ù–µ—Ç —Å–µ—Å—Å–∏–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –¥–ª—è user_id {user_id}.")
            continue

        for session in sessions:
            session_id = session.get('id')
            date_str = session.get('date')
            time_str = session.get('time')
            recurrence = session.get('recurrence', 'none').lower()
            days_of_week_str = session.get('days_of_week', '')  

            try:
               
                session_datetime = datetime.strptime(f"{date_str} {time_str}", '%Y-%m-%d %H:%M:%S')
                session_datetime = TIMEZONE.localize(session_datetime)
            except ValueError as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ datetime –¥–ª—è —Å–µ—Å—Å–∏–∏ {session_id}: {e}")
                continue

            if recurrence == 'weekly' and days_of_week_str:
                days_of_week = days_of_week_str.split(',')
                day_crons = [day_name_to_cron(day) for day in days_of_week]
                day_crons_str = ','.join(day_crons)

                message = (
                    f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: —É –≤–∞—Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —Å–µ–≥–æ–¥–Ω—è –≤ {session_datetime.strftime('%H:%M')}!"
                    f"\nüìÖ –ü–æ–≤—Ç–æ—Ä—è–µ–º–æ—Å—Ç—å: {recurrence.capitalize()}"
                    f"\nüìÜ –î–Ω–∏ –Ω–µ–¥–µ–ª–∏: {days_of_week_str}"
                )

                scheduler.add_job(
                    send_reminder,
                    trigger='cron',
                    day_of_week=day_crons_str,
                    hour=session_datetime.hour,
                    minute=session_datetime.minute,
                    kwargs={'context': {'chat_id': chat_id, 'message': message}},
                )
                logger.info(f"–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è chat_id {chat_id} –ø–æ —Å–µ—Å—Å–∏–∏ {session_id}")
            else:
                if session_datetime > datetime.now(TIMEZONE):
                    message = (
                        f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: —É –≤–∞—Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ {session_datetime.strftime('%Y-%m-%d')} –≤ {session_datetime.strftime('%H:%M')}!"
                        f"\nüìÖ –ü–æ–≤—Ç–æ—Ä—è–µ–º–æ—Å—Ç—å: {recurrence.capitalize()}"
                    )

                    scheduler.add_job(
                        send_reminder,
                        trigger='date',
                        run_date=session_datetime,
                        kwargs={'context': {'chat_id': chat_id, 'message': message}},
                    )
                    logger.info(f"–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è chat_id {chat_id} –ø–æ —Å–µ—Å—Å–∏–∏ {session_id}")

    scheduler.start()
    logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∑–∞–ø—É—â–µ–Ω.")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start.
    """
    chat_id = update.effective_chat.id

    user_id = get_user_id_from_chat_id(chat_id)

    if user_id:
        
        sessions = fetch_training_sessions(user_id=user_id)

        if not sessions:
            await update.message.reply_text('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã—Ö —Å–µ—Å—Å–∏–π.')
            return

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = "üìã –í–∞—à–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–µ —Å–µ—Å—Å–∏–∏:\n\n"
        for session in sessions:
            session_id = session.get('id', 'N/A')
            date_str = session.get('date', 'N/A')
            time_str = session.get('time', 'N/A')
            recurrence = session.get('recurrence', 'N/A')
            days_of_week = session.get('days_of_week', 'N/A')

            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            if recurrence.lower() == 'weekly' and days_of_week != 'N/A':
                message += (
                    f"üîπ **ID:** {session_id}\n"
                    f"üîπ **–î–∞—Ç–∞:** {date_str}\n"
                    f"üîπ **–í—Ä–µ–º—è:** {time_str}\n"
                    f"üîπ **–ü–æ–≤—Ç–æ—Ä—è–µ–º–æ—Å—Ç—å:** {recurrence}\n"
                    f"üîπ **–î–Ω–∏ –Ω–µ–¥–µ–ª–∏:** {days_of_week}\n\n"
                )
            else:
                message += (
                    f"üîπ **ID:** {session_id}\n"
                    f"üîπ **–î–∞—Ç–∞:** {date_str}\n"
                    f"üîπ **–í—Ä–µ–º—è:** {time_str}\n"
                    f"üîπ **–ü–æ–≤—Ç–æ—Ä—è–µ–º–æ—Å—Ç—å:** {recurrence}\n\n"
                )

        await update.message.reply_text(message, parse_mode='Markdown')
    else:
        await update.message.reply_text(
            '–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ —Å–≤—è–∑–∞–Ω —Å Telegram. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–¥ —Å–≤—è–∑—ã–≤–∞–Ω–∏—è.'
        )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —ç—Ç–æ –∫–æ–¥ —Å–≤—è–∑—ã–≤–∞–Ω–∏—è).
    """
    message_text = update.message.text.strip()
    chat_id = update.message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–¥–æ–º —Å–≤—è–∑—ã–≤–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, UUID)
    try:
        uuid_obj = uuid.UUID(message_text, version=4)
    except ValueError:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )
        return

   
    try:
        logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å–≤—è–∑—ã–≤–∞–Ω–∏—è –¥–ª—è chat_id {chat_id} —Å –∫–æ–¥–æ–º {message_text}")
        response = requests.post(
            f"{LINK_API_URL}confirm/",
            json={'code': message_text, 'telegram_user_id': str(chat_id)},
            headers={'Content-Type': 'application/json'}
        )
        response.raise_for_status()
        data = response.json()
        if data.get('detail') == 'Telegram —É—Å–ø–µ—à–Ω–æ —Å–≤—è–∑–∞–Ω.':
            user_id = data.get('user_id')
            if user_id:
                save_user_chat_id(chat_id, user_id)
                await update.message.reply_text(
                    "‚úÖ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–≤—è–∑–∞–Ω —Å Telegram!"
                )
            else:
                await update.message.reply_text(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–∞—à–µ–≥–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."
                )
        else:
            await update.message.reply_text(
                data.get('detail', '‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞.')
            )
    except requests.HTTPError as e:
        if e.response.status_code == 400:
            data = e.response.json()
            await update.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞: {data.get('detail', '–ù–µ–≤–µ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å.')}"
            )
        elif e.response.status_code == 404:
            await update.message.reply_text(
                "‚ùå –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–≤—è–∑—ã–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω."
            )
        else:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–≤—è–∑—ã–≤–∞–Ω–∏–∏ Telegram: {e}")
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–≤—è–∑—ã–≤–∞–Ω–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
    except requests.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–≤—è–∑—ã–≤–∞–Ω–∏–∏ Telegram: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–≤—è–∑—ã–≤–∞–Ω–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

def convert_chat_ids_to_dict():
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç chat_ids.json –∏–∑ —Å–ø–∏—Å–∫–∞ –≤ —Å–ª–æ–≤–∞—Ä—å, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ.
    """
    try:
        with open(CHAT_IDS_FILE, 'r') as f:
            data = json.load(f)
        if isinstance(data, list):
            chat_ids = {str(chat_id): None for chat_id in data}
            with open(CHAT_IDS_FILE, 'w') as f:
                json.dump(chat_ids, f, indent=4)
            logger.info("–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ chat_ids.json –∏–∑ —Å–ø–∏—Å–∫–∞ –≤ —Å–ª–æ–≤–∞—Ä—å –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")
    except FileNotFoundError:
        # –§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å
        with open(CHAT_IDS_FILE, 'w') as f:
            json.dump({}, f)
        logger.info(f"–§–∞–π–ª {CHAT_IDS_FILE} —Å–æ–∑–¥–∞–Ω –∫–∞–∫ –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å.")
    except json.JSONDecodeError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ {CHAT_IDS_FILE}: {e}")
    except Exception as e:
        logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ {CHAT_IDS_FILE}: {e}")

def main():
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∞ chat_ids.json –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    convert_chat_ids_to_dict()

    application = ApplicationBuilder().token(TOKEN).build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
    start_handler = CommandHandler("start", start)
    application.add_handler(start_handler)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∫–æ–¥–æ–º —Å–≤—è–∑—ã–≤–∞–Ω–∏—è
    message_handler = MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message)
    application.add_handler(message_handler)

    # –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    schedule_reminders(application)

    logger.info("–ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞.")
    application.run_polling()

if __name__ == '__main__':
    main()
